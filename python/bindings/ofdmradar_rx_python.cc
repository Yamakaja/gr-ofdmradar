/*
 * Copyright 2021 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/***********************************************************************************/
/* This file is automatically generated using bindtool and can be manually edited  */
/* The following lines can be configured to regenerate this file during cmake      */
/* If manual edits are made, the following tags should be modified accordingly.    */
/* BINDTOOL_GEN_AUTOMATIC(0)                                                       */
/* BINDTOOL_USE_PYGCCXML(0)                                                        */
/* BINDTOOL_HEADER_FILE(ofdmradar_rx.h)                                        */
/* BINDTOOL_HEADER_FILE_HASH(06cf29fe5c59e8eaad22b2092f7de018)                     */
/***********************************************************************************/

#include <pybind11/complex.h>
#include <pybind11/numpy.h>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>
#include <pybind11/functional.h>

namespace py = pybind11;

#include <ofdmradar/ofdmradar_rx.h>
// pydoc.h is automatically generated in the build directory
#include <ofdmradar_rx_pydoc.h>

void bind_ofdmradar_rx(py::module &m)
{

    using ofdmradar_params = gr::ofdmradar::ofdmradar_params;
    using ofdmradar_rx = gr::ofdmradar::ofdmradar_rx;

    py::class_<ofdmradar_rx,
               gr::sync_block,
               gr::block,
               gr::basic_block,
               std::shared_ptr<ofdmradar_rx>>(m, "ofdmradar_rx", D(ofdmradar_rx))

        // .def(py::init(&ofdmradar_rx::make), D(ofdmradar_rx, make))
        .def(py::init([](ofdmradar_params::sptr ofdm_params,
                         std::function<void(py::array_t<const gr_complex>)> &&callback,
                         const std::string &len_tag_key) {
                    auto cb = callback;
                 return ofdmradar_rx::make(
                     ofdm_params,
                     [cb](const gr_complex *ptr, size_t n, size_t m) {
                         py::gil_scoped_acquire acquire;
                         cb(py::array_t<const gr_complex>({ n, m }, ptr));
                     },
                     len_tag_key);
             }),
             D(ofdmradar_rx, make))


        ;
}
